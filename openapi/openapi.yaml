openapi: 3.0.0
info:
  title: "Eventival API"
  version: "1.0.0"
  contact:
    name: Robert Smol
    email: robert.smol@stereoit.com

servers:
  - url: http://localhost:8000
    description: Localhost server

paths:
  /hello:
    get:
      operationId: getHello
      summary: Simple hello message endpoint
      responses:
        '200':
          description: OK
          content: 
            text/plain:
              schema:
                type: string
              example: Hello

  /users:
    description: >
      This resource represents collection of users.

    get:
      operationId: getAllUsers
      summary: Fetch all users with pagination
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
    post:
      operationId: createNewUser
      summary: Register a new user with all details
      tags:
        - User
      requestBody:
        description: Request user
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '409':
          description: Duplicate user
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    summary: Represents a user
    description: >-
      This resource represents an individual user in the system.
      Each user is identified by a numeric `id`.
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: The user ID
    get:
      operationId: getUserByID
      summary: Get user details
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update the user with provided data
      tags:
        - User
      responses:
        '200':
          description: User updated
    delete:
      operationId: deleteUser
      summary: Delete specific user based on the ID provided
      tags:
        - User
      responses:
        '204':
          description: User deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


components:
  schemas:
    Error:
      type: object
      properties:
        status:
          type: integer
        error:
          type: string
        message:
          type: string
      example:
        - status: 401
          error: 'Not Authorized'
          message: 'Please authorize to perform this operation.'

    UserRequest:
      type: object
      properties:
        email:
          type: string
          description: User's primary email address
        firstName:
          type: string
          description: First name
        lastName:
          type: string
          description: Last name
      example:
        email: "john.doe@example.com"
        firstName: John
        lastName: Doe


    UserResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique ID of the user in UUIDv4 format
        email:
          type: string
          description: User's primary email address
        firstName:
          type: string
          description: First name
        lastName:
          type: string
          description: Last name
      example:
        id: "cceb464d-b689-11e9-872d-1c3947113383"
        email: "john.doe@example.com"
        firstName: John
        lastName: Doe

    UserListResponse:
      type: array
      minItems: 0
      items:
        $ref: '#/components/schemas/UserResponse'
      example:
        - id: "cceb464d-b689-11e9-872d-1c3947113383"
          email: "user1@example.com"
        - id: "bc554f60-761e-482b-8f20-d56dc5c01951"
          email: "user2@example.com"

  parameters:
    offsetParam:  # <-- Arbitrary name for the definition that will be used to refer to it.
                  # Not necessarily the same as the parameter name.
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
      description: The number of items to skip before starting to collect the result set.
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 25
      description: The numbers of items to return. 

  responses:
    GenericError:
      description: An error occured.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
