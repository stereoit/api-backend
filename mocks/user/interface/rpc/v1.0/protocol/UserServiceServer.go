// Code generated by mockery v1.1.2. DO NOT EDIT.

package mocks

import (
	context "context"

	protocol "github.com/stereoit/eventival/pkg/user/interface/rpc/v1.0/protocol"
	mock "github.com/stretchr/testify/mock"
)

// UserServiceServer is an autogenerated mock type for the UserServiceServer type
type UserServiceServer struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) DeleteUser(_a0 context.Context, _a1 *protocol.DeleteUserRequestType) (*protocol.EmptyResponseType, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *protocol.EmptyResponseType
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DeleteUserRequestType) *protocol.EmptyResponseType); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.EmptyResponseType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *protocol.DeleteUserRequestType) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUser provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) ListUser(_a0 context.Context, _a1 *protocol.ListUserRequestType) (*protocol.ListUserResponseType, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *protocol.ListUserResponseType
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ListUserRequestType) *protocol.ListUserResponseType); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.ListUserResponseType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *protocol.ListUserRequestType) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) RegisterUser(_a0 context.Context, _a1 *protocol.RegisterUserRequestType) (*protocol.RegisterUserResponseType, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *protocol.RegisterUserResponseType
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.RegisterUserRequestType) *protocol.RegisterUserResponseType); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.RegisterUserResponseType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *protocol.RegisterUserRequestType) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) UpdateUser(_a0 context.Context, _a1 *protocol.UpdateUserRequestType) (*protocol.EmptyResponseType, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *protocol.EmptyResponseType
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.UpdateUserRequestType) *protocol.EmptyResponseType); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.EmptyResponseType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *protocol.UpdateUserRequestType) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
