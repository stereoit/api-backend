// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"
import protocol "github.com/stereoit/eventival/pkg/user/interface/rpc/v1.0/protocol"

// UserServiceClient is an autogenerated mock type for the UserServiceClient type
type UserServiceClient struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) DeleteUser(ctx context.Context, in *protocol.DeleteUserRequestType, opts ...grpc.CallOption) (*protocol.EmptyResponseType, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *protocol.EmptyResponseType
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DeleteUserRequestType, ...grpc.CallOption) *protocol.EmptyResponseType); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.EmptyResponseType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *protocol.DeleteUserRequestType, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUser provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) ListUser(ctx context.Context, in *protocol.ListUserRequestType, opts ...grpc.CallOption) (*protocol.ListUserResponseType, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *protocol.ListUserResponseType
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ListUserRequestType, ...grpc.CallOption) *protocol.ListUserResponseType); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.ListUserResponseType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *protocol.ListUserRequestType, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) RegisterUser(ctx context.Context, in *protocol.RegisterUserRequestType, opts ...grpc.CallOption) (*protocol.RegisterUserResponseType, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *protocol.RegisterUserResponseType
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.RegisterUserRequestType, ...grpc.CallOption) *protocol.RegisterUserResponseType); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.RegisterUserResponseType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *protocol.RegisterUserRequestType, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) UpdateUser(ctx context.Context, in *protocol.UpdateUserRequestType, opts ...grpc.CallOption) (*protocol.EmptyResponseType, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *protocol.EmptyResponseType
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.UpdateUserRequestType, ...grpc.CallOption) *protocol.EmptyResponseType); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.EmptyResponseType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *protocol.UpdateUserRequestType, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
